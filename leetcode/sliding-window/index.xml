<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://jackeryli.github.io/leetcode/sliding-window/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://jackeryli.github.io/leetcode/sliding-window/index.xml" rel="self" type="application/rss+xml"/><item><title>209. Minimum Size Subarray Sum</title><link>https://jackeryli.github.io/leetcode/sliding-window/209/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jackeryli.github.io/leetcode/sliding-window/209/</guid><description>class Solution { public: int minSubArrayLen(int target, vector&amp;lt;int&amp;gt;&amp;amp; nums) { int left = 0; int sum = 0; int ans = INT_MAX; for(int right = 0; right &amp;lt; nums.size(); right++) { sum += nums[right]; while(sum &amp;gt;= target) { ans = min(ans, right - left + 1); sum -= nums[left++]; } } return ans == INT_MAX ? 0 : ans; } };</description></item></channel></rss>