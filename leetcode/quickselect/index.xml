<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://jackeryli.github.io/leetcode/quickselect/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://jackeryli.github.io/leetcode/quickselect/index.xml" rel="self" type="application/rss+xml"/><item><title>0215.Kth Largest Element in an Array</title><link>https://jackeryli.github.io/leetcode/quickselect/0215/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jackeryli.github.io/leetcode/quickselect/0215/</guid><description>class Solution { public: int partition(vector&amp;lt;int&amp;gt;&amp;amp; nums, int left, int right) { // choose pivot int pivot = nums[right]; int l = left; int r = right - 1; // swap left and right based on pivot while(l &amp;lt;= r) { if(nums[l] &amp;lt; pivot &amp;amp;&amp;amp; nums[r] &amp;gt; pivot) swap(nums[l++], nums[r--]); if(nums[l] &amp;gt;= pivot) l++; if(nums[r] &amp;lt;= pivot) r--; } // 5 3 4 // lr // 5 3 4 // r l // swap pivot to l swap(nums[right], nums[l]); return l; } int findKthLargest(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) { // use quickselect // Time: O(n) // Space: O(1) int l = 0; int r = nums.</description></item></channel></rss>