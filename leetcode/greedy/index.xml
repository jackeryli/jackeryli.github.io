<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://jackeryli.github.io/leetcode/greedy/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://jackeryli.github.io/leetcode/greedy/index.xml" rel="self" type="application/rss+xml"/><item><title>0121.Best Time to Buy and Sell Stock</title><link>https://jackeryli.github.io/leetcode/greedy/0121/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jackeryli.github.io/leetcode/greedy/0121/</guid><description>class Solution { public: int maxProfit(vector&amp;lt;int&amp;gt;&amp;amp; prices) { int result = 0; int minPrice = 100000; for(int&amp;amp; price : prices) { // find minPrice // if price is smaller than minPrice, replace minPrice // else, stock can be selled, compare to the result if(price &amp;lt; minPrice){ minPrice = price; } else { result = max(result, price - minPrice); } } return result; } };</description></item><item><title>0134. Gas Station</title><link>https://jackeryli.github.io/leetcode/greedy/0134/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jackeryli.github.io/leetcode/greedy/0134/</guid><description>Naive (TLE) # class Solution { public int canCompleteCircuit(int[] gas, int[] cost) { // 1 2 3 4 5 1 2 3 4 5 // 3 4 5 1 2 3 4 5 1 2 // 2 3 4 2 3 4 // 3 4 3 3 4 3 int n = gas.length; int[] circleGas = new int[n*2]; int[] circleCost = new int[n*2]; for(int i = 0; i &amp;lt; n; i++) { circleGas[i] = gas[i]; circleGas[i + n] = gas[i]; circleCost[i] = cost[i]; circleCost[i + n] = cost[i]; } for(int i = 0; i &amp;lt; n; i++) { if(gas[i] &amp;gt;= cost[i]) { // start checking int gasSum = gas[i]; int costSum = cost[i]; boolean isFailed = false; for(int j = i+1; j &amp;lt; i + n; j++) { gasSum += circleGas[j]; costSum += circleCost[j]; if(costSum &amp;gt; gasSum) { // failed isFailed = true; break; } } if(!</description></item></channel></rss>