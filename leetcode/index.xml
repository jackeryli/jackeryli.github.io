<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://jackeryli.github.io/leetcode/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://jackeryli.github.io/leetcode/index.xml" rel="self" type="application/rss+xml"/><item><title>2966. Divide Array Into Arrays With Max Difference</title><link>https://jackeryli.github.io/leetcode/2966/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jackeryli.github.io/leetcode/2966/</guid><description>class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; divideArray(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) { // sort array from small to large // divide into 3 part // iterate and check if part[0] - part[2] is bigger than k // if yes, return empty vector // if no, assign part[0], part[1], part[2] to one vector sort(nums.begin(), nums.end()); vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; ans = {nums.size()/3, vector&amp;lt;int&amp;gt;{}}; for(int i = 0; i &amp;lt; nums.size(); i+=3){ if((nums[i+2] - nums[i]) &amp;lt;= k) { ans[i/3] = {nums[i], nums[i+1], nums[i+2]}; } else { return vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;{}; } } return ans; } };</description></item></channel></rss>