<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://jackeryli.github.io/leetcode/hashmap/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://jackeryli.github.io/leetcode/hashmap/index.xml" rel="self" type="application/rss+xml"/><item><title>242. Valid Anagrams</title><link>https://jackeryli.github.io/leetcode/hashmap/242/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jackeryli.github.io/leetcode/hashmap/242/</guid><description>class Solution { public: bool isAnagram(string s, string t) { // If size different, it isn&amp;#39;t anagram if(s.size() != t.size()) return false; unordered_map&amp;lt;char, int&amp;gt; charToCount; for(char c : s) { charToCount[c]++; } for(char c : t) { charToCount[c]--; } for(int i = 0; i &amp;lt; 26; i++) { char c = &amp;#39;a&amp;#39; + i; if(charToCount[c] != 0) return false; } return true; } };</description></item><item><title>36.Valid Sudoku</title><link>https://jackeryli.github.io/leetcode/hashmap/36/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jackeryli.github.io/leetcode/hashmap/36/</guid><description>class Solution { public: bool isValidSudoku(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; board) { int m = board.size(); int n = board[0].size(); int columnMap[9][9]; int rowMap[9][9]; int threeMap[9][9]; memset(rowMap, 0, sizeof(rowMap)); memset(columnMap, 0, sizeof(columnMap)); memset(threeMap, 0, sizeof(threeMap)); for(int i = 0; i &amp;lt; m; i++){ for(int j = 0; j &amp;lt; n; j++){ if(isdigit(board[i][j])) { int idx = board[i][j] - &amp;#39;1&amp;#39;; // columnMap if(columnMap[j][idx] != 0) return false; columnMap[j][idx] = 1; // rowMap if(rowMap[i][idx] != 0) return false; rowMap[i][idx] = 1; // threeMap int threeIdx = i/3 * 3 + j/3; if(threeMap[threeIdx][idx] !</description></item></channel></rss>