<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on yenchunli Website</title><link>http://127.0.0.1/posts/</link><description>Recent content in Posts on yenchunli Website</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 14 Apr 2020 15:59:31 +0800</lastBuildDate><atom:link href="http://127.0.0.1/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Netstat</title><link>http://127.0.0.1/posts/linux-netstat/</link><pubDate>Tue, 14 Apr 2020 15:59:31 +0800</pubDate><guid>http://127.0.0.1/posts/linux-netstat/</guid><description>A command which often use to check network stats</description></item><item><title>Install ngx_http_geoip_module for ip analysis</title><link>http://127.0.0.1/posts/ngx_http_geoip_module-installation/</link><pubDate>Tue, 14 Apr 2020 12:18:32 +0800</pubDate><guid>http://127.0.0.1/posts/ngx_http_geoip_module-installation/</guid><description>Ngx-http-geoip-module can enable Internet traffic analysis for indivisual conuntry.</description></item><item><title>Install nginx-module-vts for monitoring</title><link>http://127.0.0.1/posts/nginx-module-vts-installation/</link><pubDate>Tue, 14 Apr 2020 10:23:09 +0800</pubDate><guid>http://127.0.0.1/posts/nginx-module-vts-installation/</guid><description>Nginx-module-vts is designed to monitor Internet traffic on Nginx.</description></item><item><title>How to use async-std</title><link>http://127.0.0.1/posts/how-to-use-async-std/</link><pubDate>Sun, 12 Apr 2020 14:08:30 +0800</pubDate><guid>http://127.0.0.1/posts/how-to-use-async-std/</guid><description>Now, rust has two ways to write async functions, async-std and tokio. Let&amp;rsquo;s first start with async-std.
Add dependencies in Cargo.toml Note that attributes is used for #[async_std::main].
Filename: Cargo.toml
[dependencies] async-std = { version = &amp;#34;1.6.5&amp;#34;, features = [&amp;#34;attributes&amp;#34;] } Write functions Filename: src/hello.rs
async main requires return a std::io::Result.
#[async_std::main] async fn main() -&amp;gt; std::io::Result&amp;lt;()&amp;gt; { println!(&amp;#34;hello world!&amp;#34;); Ok(()) } Build your code cargo run</description></item><item><title>Write a request limiter in Go</title><link>http://127.0.0.1/posts/go-request-limiter/</link><pubDate>Sun, 12 Apr 2020 14:08:30 +0800</pubDate><guid>http://127.0.0.1/posts/go-request-limiter/</guid><description>A middleware which can restrict ip request in certain time window</description></item><item><title>Push hugo to Github Page</title><link>http://127.0.0.1/posts/hugo-to-github/</link><pubDate>Sun, 12 Apr 2020 11:39:20 +0800</pubDate><guid>http://127.0.0.1/posts/hugo-to-github/</guid><description>We push our hugo website to Github Page.</description></item><item><title>Install Hugo on MacOS</title><link>http://127.0.0.1/posts/hugo-install/</link><pubDate>Sat, 11 Apr 2020 11:39:20 +0800</pubDate><guid>http://127.0.0.1/posts/hugo-install/</guid><description>&lt;code>Hugo&lt;/code> is the fastest static website generator in the world. It is really suitable for software developers to generate their personal website. In this tutorial, we start to build up a website which used &lt;code>Hugo&lt;/code>.</description></item></channel></rss>