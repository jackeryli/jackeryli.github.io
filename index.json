[{"content":"Shell scripts command Some useful commands like awk, sed, sort, wc help us process text files.\nShell scripts command grep Basic Usage Usages Fetch no blank line and no comments Find all files started with \u0026lsquo;b\u0026rsquo; sed awk sort wc find du Find larget files in certain directory grep -v: reverse -i: don\u0026rsquo;t care capital character\nBasic Usage # net grep -n \u0026#39;net\u0026#39; test.txt # nat, net grep -n \u0026#39;n[ae]t\u0026#39; test.txt # Not start with s grep -n \u0026#39;[^s]at\u0026#39; test.txt # Not start with a-z A-Z 0-9 grep -n \u0026#39;[^a-zA-Z0-9]at\u0026#39; test.txt # start with \u0026#39;the\u0026#39; grep -n \u0026#39;^the\u0026#39; test.txt # start with a-z grep -n \u0026#39;^[a-z]\u0026#39; test.txt # Not start with alphabets grep -n \u0026#39;^[^a-zA-Z]\u0026#39; test.txt # end with . grep -n \u0026#39;\\.$\u0026#39; test.txt # blank line grep -n \u0026#39;^$\u0026#39; test.txt grep -n \u0026#39;f..d\u0026#39; test.txt grep -n \u0026#39;eee*\u0026#39; test.txt grep -n \u0026#39;goo*g\u0026#39; test.txt grep -n \u0026#39;g.*g\u0026#39; test.txt grep -n \u0026#39;go\\{2\\}\u0026#39; test.txt grep -n \u0026#39;go\\{2,5\\}g\u0026#39; test.txt grep -n \u0026#39;go\\{2,\\}g\u0026#39; test.txt Usages Fetch no blank line and no comments grep -v \u0026#39;^$\u0026#39; /etc/fstab | grep -v \u0026#39;^#\u0026#39; Find all files started with \u0026lsquo;b\u0026rsquo; ls | grep -n \u0026#39;^a.*\u0026#39; sed awk FROM vbird :)\nlast | awk \u0026#39;print $1 \u0026#34;\\t\u0026#34; $3\u0026#39; last -n 20 | awk \u0026#39;{print $1 \u0026#34;\\t lines \u0026#34; NR \u0026#34; has \u0026#34; NF \u0026#34; columns\u0026#34;}\u0026#39; cat /etc/passwd | awk \u0026#39;BEGIN {FS=\u0026#34;:\u0026#34;} $3 \u0026lt; 10 {print $1 \u0026#34;\\t \u0026#34; $3}\u0026#39; ifconfig enp0s3 | grep \u0026#39;inet \u0026#39; | sed \u0026#39;s#^.*inet ##g\u0026#39; | sed \u0026#39;s# *netmask.*$##g\u0026#39; ifconfig enp0s3 | grep \u0026#39;inet \u0026#39; | awk \u0026#39;{printf $2 \u0026#34;\\n\u0026#34;}\u0026#39; find /etc -type f 2\u0026gt;/dev/null | xargs -n 10 grep \u0026#39;[xyz]\u0026#39; \u0026gt; output.txt 2\u0026gt;/dev/null cat /etc/sysctl.conf | grep -v \u0026#39;^#\u0026#39; | grep -v \u0026#39;^$\u0026#39; | grep \u0026#39;^[a-zA-Z]\u0026#39; | wc -l sort cat access.log |awk \u0026#39;{print $7}\u0026#39;|sort|uniq -c|sort -n -k 1 -r wc find find ~/Downloads -size +100M -name \u0026#34;*.zip\u0026#34; -exec rm -i {} + du Find larget files in certain directory du -a /etc | sort -n -r | head -n 5 ","permalink":"https://jacklatte.github.io/posts/2022-06-06-study-vbird-shell-script/","summary":"Shell scripts command Some useful commands like awk, sed, sort, wc help us process text files.\nShell scripts command grep Basic Usage Usages Fetch no blank line and no comments Find all files started with \u0026lsquo;b\u0026rsquo; sed awk sort wc find du Find larget files in certain directory grep -v: reverse -i: don\u0026rsquo;t care capital character\nBasic Usage # net grep -n \u0026#39;net\u0026#39; test.txt # nat, net grep -n \u0026#39;n[ae]t\u0026#39; test.","title":"Study vbird shell script"},{"content":"Shell script Command Description -e check if exists -o nogolp Prevent wildcard character $@ all args ($1,$2,$3\u0026hellip;.) -x check if executable type locate the command /dev/null 2\u0026gt;$1 redirect stdout and stderr to /dev/null #!/bin/sh set -e set -o nogolp fatal() { echo \u0026#39;[ERROR] \u0026#39; \u0026#34;$@\u0026#34; \u0026gt;\u0026amp;2 exit 1 } # --- fatal if no systemd or openrc --- verify_system() { if [ -x /sbin/openrc-run ]; then HAS_OPENRC=true return fi if [ -x /bin/systemctl ] || type systemctl \u0026gt; /dev/null 2\u0026gt;\u0026amp;1; then HAS_SYSTEMD=true return fi fatal \u0026#39;Can not find systemd or openrc to use as a process supervisor for k3s\u0026#39; } if if [-x /bin/sh]; then elif [-x /bin/bash]; then else echo \u0026#34;no\u0026#34; fi case case ${1} in \u0026#34;one\u0026#34;) echo \u0026#34;Your choice is ONE\u0026#34; ;; \u0026#34;two\u0026#34;) echo \u0026#34;Your choice is TWO\u0026#34; ;; \u0026#34;three\u0026#34;) echo \u0026#34;Your choice is THREE\u0026#34; ;; *) echo \u0026#34;Usage ${0} {one|two|three}\u0026#34; ;; esac for loop ","permalink":"https://jacklatte.github.io/posts/2022-06-03-read-k3s-install-script/","summary":"Shell script Command Description -e check if exists -o nogolp Prevent wildcard character $@ all args ($1,$2,$3\u0026hellip;.) -x check if executable type locate the command /dev/null 2\u0026gt;$1 redirect stdout and stderr to /dev/null #!/bin/sh set -e set -o nogolp fatal() { echo \u0026#39;[ERROR] \u0026#39; \u0026#34;$@\u0026#34; \u0026gt;\u0026amp;2 exit 1 } # --- fatal if no systemd or openrc --- verify_system() { if [ -x /sbin/openrc-run ]; then HAS_OPENRC=true return fi if [ -x /bin/systemctl ] || type systemctl \u0026gt; /dev/null 2\u0026gt;\u0026amp;1; then HAS_SYSTEMD=true return fi fatal \u0026#39;Can not find systemd or openrc to use as a process supervisor for k3s\u0026#39; } if if [-x /bin/sh]; then elif [-x /bin/bash]; then else echo \u0026#34;no\u0026#34; fi case case ${1} in \u0026#34;one\u0026#34;) echo \u0026#34;Your choice is ONE\u0026#34; ;; \u0026#34;two\u0026#34;) echo \u0026#34;Your choice is TWO\u0026#34; ;; \u0026#34;three\u0026#34;) echo \u0026#34;Your choice is THREE\u0026#34; ;; *) echo \u0026#34;Usage ${0} {one|two|three}\u0026#34; ;; esac for loop ","title":"Read k3s install script"},{"content":"IO redirection 0 - stdin 1 - stdout 2 - stderr\n# export stdout to output.txt, stderr to error.txt ls -al test \u0026gt;output.txt 2\u0026gt;error.txt # export stdout to output.txt, redirect stderr to stdout ls -al test\u0026gt;output.txt 2\u0026gt;$1 ","permalink":"https://jacklatte.github.io/posts/2022-06-02-linux-io-redirection/","summary":"IO redirection 0 - stdin 1 - stdout 2 - stderr\n# export stdout to output.txt, stderr to error.txt ls -al test \u0026gt;output.txt 2\u0026gt;error.txt # export stdout to output.txt, redirect stderr to stdout ls -al test\u0026gt;output.txt 2\u0026gt;$1 ","title":"Linux IO redirection"},{"content":"Executor Service We create a Callable Object to construct a custom runnable task.\npackage com.jack; import java.util.Random; import java.util.concurrent.Callable; public class BankBatchTask implements Callable\u0026lt;String\u0026gt; { private static final String OK = \u0026#34;0000\u0026#34;; private static final String TIME_EXPIRED = \u0026#34;4000\u0026#34;; private static final String INTERNAL_SERVER_ERROR = \u0026#34;9000\u0026#34;; Random random = new Random(); @Override public String call() throws Exception { try { int sleepTime = random.nextInt(10000); Thread.sleep(sleepTime); if(sleepTime \u0026gt; 500) return TIME_EXPIRED; return OK; } catch(Exception e) { e.printStackTrace(); return INTERNAL_SERVER_ERROR; } } } Executors.newFixThreadPool(10) creates a new threadPool. Callable will return a Future object. awaitTermination(1, TimeUnit.SECONDS) waits all tasks down after 1s.\npackage com.jack; import java.util.ArrayList; import java.util.List; import java.util.concurrent.ExecutionException; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.Future; import java.util.concurrent.TimeUnit; public class Main { public static void main(String[] args) throws InterruptedException { ExecutorService executor = Executors.newFixedThreadPool(10); List\u0026lt;Future\u0026lt;String\u0026gt;\u0026gt; resultList = new ArrayList\u0026lt;\u0026gt;(); for(int i = 0; i \u0026lt; 30; i++) { Future\u0026lt;String\u0026gt; result = executor.submit(new CTBCBatchTask()); resultList.add(result); } if(!executor.awaitTermination(1, TimeUnit.SECONDS)) { executor.shutdown(); } for(int i = 0; i \u0026lt; resultList.size(); i++) { Future\u0026lt;String\u0026gt; result = resultList.get(i); String response = null; try { response = result.get(); } catch (ExecutionException e) { e.printStackTrace(); } System.out.printf(\u0026#34;Task %d: %s\\n\u0026#34;, i, response); } executor.shutdown(); } } ","permalink":"https://jacklatte.github.io/posts/2022-06-01-java-executor-service/","summary":"Executor Service We create a Callable Object to construct a custom runnable task.\npackage com.jack; import java.util.Random; import java.util.concurrent.Callable; public class BankBatchTask implements Callable\u0026lt;String\u0026gt; { private static final String OK = \u0026#34;0000\u0026#34;; private static final String TIME_EXPIRED = \u0026#34;4000\u0026#34;; private static final String INTERNAL_SERVER_ERROR = \u0026#34;9000\u0026#34;; Random random = new Random(); @Override public String call() throws Exception { try { int sleepTime = random.nextInt(10000); Thread.sleep(sleepTime); if(sleepTime \u0026gt; 500) return TIME_EXPIRED; return OK; } catch(Exception e) { e.","title":"Java multi-thread programming with executor service"},{"content":"This is the implementation of String in JDK 11:\npublic final class String implements java.io.Serializable, Comparable\u0026lt;String\u0026gt;, CharSequence { /** The value is used for character storage */ private final byte[] value; /** Encoder to encode value, LATIN1 or UTF16 */ private final byte coder; /** Cache the hash code for the string */ private int hash; [...] } We can see that String class is decorated by final, so it cannot be inherited by other classes. We can also see that value is decorated by final and it means that value is immuntable. If we don\u0026rsquo;t make String immutable, it might cause security issues. For example, if String doesn\u0026rsquo;t remain immutable and we try to send confidential messages to others, hackers can change the message to what they want.\nThere is a String pool in the JVM. String pool caches all String object in it. There are two ways to create a String object:\nString s = \u0026ldquo;abc\u0026rdquo; String s = new String(\u0026ldquo;abc\u0026rdquo;) If we execute the following code, we will find that s1 == s2, s2 != s3, s3 != s4. The reason is that s2 does not create new instance. Instead, it will first look for \u0026ldquo;abc\u0026rdquo; in String pool. If success, it return the reference. Besides, there is a slightly different when we use new String. In this case, JVM will create a new String object in heap memory and make it reference to \u0026ldquo;abc\u0026rdquo; in the String pool.\nString s1 = \u0026#34;abc\u0026#34;; String s2 = \u0026#34;abc\u0026#34;; String s3 = new String(\u0026#34;abc\u0026#34;); String s4 = new String(\u0026#34;abc\u0026#34;); And if we try to modify String, it works. That because s1 here is only a reference. The String object still resides in String pool and it is still not changed.\nString s1 = \u0026#34;def\u0026#34;; s1 = \u0026#34;ghi\u0026#34;; /** it works */ How to optimize concating string Use StringBuilder or StringBuffer to concat multiple strings. If your application is not thread-safe, use StringBuffer. Otherwise, StringBuilder is faster.\nThis is the implementaion of StringBuffer:\npublic final class StringBuffer extends AbstractStringBuilder implements java.io.Serializable, Comparable\u0026lt;StringBuffer\u0026gt;, CharSequence { private transient String toStringCache; @Override public synchronized int compareTo(StringBuffer another) { return super.compareTo(another); } @Override public synchronized int length() { return count; } [...] } We can see the introduction of synchronized in Oracle websites:\n// https://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html First, it is not possible for two invocations of synchronized methods on the same object to interleave. When one thread is executing a synchronized method for an object, all other threads that invoke synchronized methods for the same object block (suspend execution) until the first thread is done with the object. Second, when a synchronized method exits, it automatically establishes a happens-before relationship with any subsequent invocation of a synchronized method for the same object. This guarantees that changes to the state of the object are visible to all threads. Note that constructors cannot be synchronized — using the synchronized keyword with a constructor is a syntax error. Synchronizing constructors doesn\u0026#39;t make sense, because only the thread that creates an object should have access to it while it is being constructed. String.intern() intern() will first look for same object in heap memory. If yes, then return reference. It help us decrease the memory usage but sometimes hurt the performance.\nhttps://blog.codecentric.de/en/2012/03/save-memory-by-using-string-intern-in-java/\nThink carefully while using Split We can use String.indexOf to split the long string and get better performance.\nString s = \u0026#34;abc de f ghij klmno p qrs\u0026#34;; List\u0026lt;String\u0026gt; ans1 = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;String\u0026gt; ans2 = new ArrayList\u0026lt;\u0026gt;(Arrays.asList(s.split(\u0026#34; \u0026#34;))); int pos = 0, end; while((end = s.indexOf(\u0026#39; \u0026#39;, pos)) \u0026gt;= 0) { ans1.add(s.substring(pos, end)); pos = end + 1; } ans1.forEach(System.out::println); ans2.forEach(System.out::println); https://www.baeldung.com/java-string-performance\n","permalink":"https://jacklatte.github.io/posts/2022-04-19-java-string-implementation/","summary":"This is the implementation of String in JDK 11:\npublic final class String implements java.io.Serializable, Comparable\u0026lt;String\u0026gt;, CharSequence { /** The value is used for character storage */ private final byte[] value; /** Encoder to encode value, LATIN1 or UTF16 */ private final byte coder; /** Cache the hash code for the string */ private int hash; [...] } We can see that String class is decorated by final, so it cannot be inherited by other classes.","title":"Java String Implementation"},{"content":"List containers Docker container has manys status which shows in the following table:\nStatus Description created Create a container but not start before restarting Meet problems and try to restart running Working removing Try to remove paused Suspend exited Stop dead Try to remove container but fail # Show status=running containers docker ps # Show all containers docker ps -a # Filter status=exit containers docker ps --filter status=exit # Show status Get container\u0026rsquo;s detail # Get All messages docker inspect nginx-test # Get Status docker inspect -f {{.State.Status}} nginx-test Manage containers docker rm $(docker ps -a) docker image prune -y docker container prune -y How to update running container config? # CPU cores num docker update --cpus=1 nginx-test # Restart policy docker update --restart=always nginx-test Docker component containerd docker-shim runc Docker network none: host: bridge: overlay Docker in docker docker run -it -v /var/run/docker.sock:/var/run/docker.sock ubuntu /bin/bash ","permalink":"https://jacklatte.github.io/posts/2022-04-10-docker-useful-commands/","summary":"List containers Docker container has manys status which shows in the following table:\nStatus Description created Create a container but not start before restarting Meet problems and try to restart running Working removing Try to remove paused Suspend exited Stop dead Try to remove container but fail # Show status=running containers docker ps # Show all containers docker ps -a # Filter status=exit containers docker ps --filter status=exit # Show status Get container\u0026rsquo;s detail # Get All messages docker inspect nginx-test # Get Status docker inspect -f {{.","title":"Docker Useful Commands"},{"content":"What is docker? Docker uses namespace and cgroup to isolate processes.\nRun nginx with docker docker run -d -p 8080:80 ubuntu/nginx What\u0026rsquo;s the difference of a process running in docker than bare metal ? If we run ps -ef on host computer, it shows that\nUID PID COMMAND root 1 /sbin/init systemd 29 nginx But if we run ps -ef inside container, it shows that\nUID PID COMMAND root 1 nginx Namespace Introduction The main difference is that PID is different. What makes this differences is that docker uses namespace to create an isolated environment. We can only see the process in the same namespace.\nLinux can do different types of isolation. We can enter man namespaces to see more details:\n$ man namespaces Namespace types The following table shows the namespace types available on Linux. The second column of the table shows the flag value that is used to specify the namespace type in var‐ ious APIs. The third column identifies the manual page that provides details on the namespace type. The last column is a summary of the resources that are isolated by the namespace type. Namespace Flag Page Isolates Cgroup CLONE_NEWCGROUP cgroup_namespaces(7) Cgroup root directory IPC CLONE_NEWIPC ipc_namespaces(7) System V IPC, POSIX message queues Network CLONE_NEWNET network_namespaces(7) Network devices, stacks, ports, etc. Mount CLONE_NEWNS mount_namespaces(7) Mount points PID CLONE_NEWPID pid_namespaces(7) Process IDs User CLONE_NEWUSER user_namespaces(7) User and group IDs UTS CLONE_NEWUTS uts_namespaces(7) Hostname and NIS domain name Cgroup Introduction cgroup stands for control group.\n","permalink":"https://jacklatte.github.io/posts/2022-04-09-docker-introduction/","summary":"What is docker? Docker uses namespace and cgroup to isolate processes.\nRun nginx with docker docker run -d -p 8080:80 ubuntu/nginx What\u0026rsquo;s the difference of a process running in docker than bare metal ? If we run ps -ef on host computer, it shows that\nUID PID COMMAND root 1 /sbin/init systemd 29 nginx But if we run ps -ef inside container, it shows that\nUID PID COMMAND root 1 nginx Namespace Introduction The main difference is that PID is different.","title":"Docker Introduction"},{"content":"Background Most of the services need a image upload services. Some applications like Ptt, Dcard and HackMD use Imgur to store pictures. Imgur provides free spaces for users to upload their images, and it also provides API so that programers can upload images by sending POST request. In this tutorial, we are going to build a imgur upload service.\nPackages Used gonic/gin: http server bytes: store images encoding/json: process response io: transfer io.Reader to []byte \u0026ldquo;mime/multipart\u0026rdquo;: form data(request) Code 1. Create a Client struct and constructor to store/initialize token and imgur API URL type Client struct { token string uploadApiUrl string } func NewClient(token string, uploadApiUrl string) *Client{ return \u0026amp;Client{token: token, uploadApiUrl: uploadApiUrl} } 2. Create a UploadImage function We consider to choose type []byte instead of io.Reader for params. The main reason is that we should pass the real data, not the FileReader pointer. Also []byte is easier to write test.\nWorkflows if image is nil, return error Create a multipart writer for writing form-data CreateFormFile creates fields for form Copy data at the end of the writer Send a POST request to Imugr with the authorization token Decode the response Return the imgur image url Functions Package Function mime/multipart func (w *Writer) CreateFormFile(fieldname, filename string) (io.Writer, error) io func Copy(dst Writer, src Reader) (written int64, err error) http func NewRequest(method, url string, body io.Reader) (*Request, error) io/ioutil func ReadAll(r io.Reader) ([]byte, error) Code func (client *Client) UploadImage(image []byte) (string, error){ if image == nil { return \u0026#34;\u0026#34;, errors.New(\u0026#34;No Image\u0026#34;) } var buf = new(bytes.Buffer) writer := multipart.NewWriter(buf) part, _ := writer.CreateFormFile(\u0026#34;image\u0026#34;, \u0026#34;filename\u0026#34;) imgReader := bytes.NewReader(image) io.Copy(part, imgReader) writer.Close() req, _ := http.NewRequest(\u0026#34;POST\u0026#34;, client.uploadApiUrl, buf) req.Header.Set(\u0026#34;Content-Type\u0026#34;, writer.FormDataContentType()) req.Header.Set(\u0026#34;Authorization\u0026#34;, \u0026#34;Bearer \u0026#34;+client.token) res, _ := http.DefaultClient.Do(req) defer res.Body.Close() body, _ := ioutil.ReadAll(res.Body) dec := json.NewDecoder(bytes.NewReader(body)) var img imageInfoDataWrapper if err := dec.Decode(\u0026amp;img); err != nil { return \u0026#34;\u0026#34;, errors.New(\u0026#34;Fail to decode\u0026#34;) } if !img.Success { return \u0026#34;\u0026#34;, errors.New(\u0026#34;Fail\u0026#34;) } return img.Data.Link, nil } Tests We set token by environment variable.\nThere are two tests:\nTest upload nil image Test upload real image io.ReadFile() reads file in []byte as input file.\nNeed to check if the return URL is correct (https://i.imgur.com/xxxxx).\npackage upload import ( \u0026#34;testing\u0026#34; \u0026#34;os\u0026#34; \u0026#34;io/ioutil\u0026#34; \u0026#34;regexp\u0026#34; ) // Test if upload a nil image, it should return error func TestUploadNilImage(t *testing.T) { client := NewClient(\u0026#34;\u0026#34;, \u0026#34;\u0026#34;) _, err := client.UploadImage(nil) if err == nil { t.Error(\u0026#34;UploadImage() should have an error\u0026#34;) t.Fail() } } // Test if upload real image, it should return success(200) func TestUploadRealImage(t *testing.T) { token := os.Getenv(\u0026#34;IMGUR_UPLOAD_TOKEN\u0026#34;) if token == \u0026#34;\u0026#34; { t.Skip(\u0026#34;IMGUR_UPLOAD_TOKEN is not set.\u0026#34;) } client := NewClient(os.Getenv(\u0026#34;IMGUR_UPLOAD_TOKEN\u0026#34;), \u0026#34;https://api.imgur.com/3/upload\u0026#34;) // Read File to byte file, err := ioutil.ReadFile(\u0026#34;logo.png\u0026#34;) if err != nil { t.Skip(\u0026#34;Can\u0026#39;t read logo.png for test\u0026#34;) } url, err := client.UploadImage(file) if err != nil { t.Errorf(\u0026#34;UploadImage() failed with error: %v\u0026#34;, err) t.Fail() } if matched, _ := regexp.MatchString(`https://i.imgur.com/`, url); !matched { t.Error(\u0026#34;UploadImage() did not return imgur url\u0026#34;) t.Fail() } } Usage we need to pass []byte to UploadImage().\nc.FormData()returns *multipart.FileHeader.\n*multipart.FileHeader.Open() returns io.Reader\nWe use ioutil.ReadAll() to read io.Reader to []byte\n// imgurUploadServer.go package main import ( \u0026#34;github.com/gin-gonic/gin\u0026#34; \u0026#34;github.com/jacklatte/arts-nthu-backend/pkg/upload\u0026#34; \u0026#34;io/ioutil\u0026#34; \u0026#34;os\u0026#34; \u0026#34;mime/multipart\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { r := gin.Default() r.POST(\u0026#34;/api/v1/upload\u0026#34;, func(c *gin.Context) { type request struct { image *multipart.FileHeader `form:image binding:\u0026#34;required\u0026#34;` } var req request if err := c.ShouldBind(\u0026amp;req); err != nil { c.JSON(http.StatusBadRequest, gin.H{ \u0026#34;message\u0026#34;: \u0026#34;miss data\u0026#34;, }) return } file, err := c.FormFile(\u0026#34;image\u0026#34;) // *Multipart.FileHeader if file.Size \u0026lt;=0 { c.JSON(500, gin.H{ \u0026#34;message\u0026#34;: err.Error(), }) } if err != nil { c.JSON(500, gin.H{ \u0026#34;message\u0026#34;: err.Error(), }) } reader, err := file.Open()\t// io.Reader if err != nil { c.JSON(500, gin.H{ \u0026#34;message\u0026#34;: err.Error(), }) } buf, err := ioutil.ReadAll(reader)\t// bytes[] if err != nil { c.JSON(500, gin.H{ \u0026#34;message\u0026#34;: err.Error(), }) } client := upload.NewClient(os.Getenv(\u0026#34;IMGUR_UPLOAD_TOKEN\u0026#34;), \u0026#34;https://api.imgur.com/3/upload\u0026#34;) imgurUrl, _ := client.UploadImage(buf) c.JSON(200, gin.H{ \u0026#34;url\u0026#34;: imgurUrl, }) return }) r.Run() } ","permalink":"https://jacklatte.github.io/posts/2021-04-10-go-imgur/","summary":"Background Most of the services need a image upload services. Some applications like Ptt, Dcard and HackMD use Imgur to store pictures. Imgur provides free spaces for users to upload their images, and it also provides API so that programers can upload images by sending POST request. In this tutorial, we are going to build a imgur upload service.\nPackages Used gonic/gin: http server bytes: store images encoding/json: process response io: transfer io.","title":"Write a imgur upload service with go"},{"content":"We want to calculate traffic for indivisual country using GeoIP. But it requires ngx_http_geoip_module. This module is not built by default, it should be enabled with the \u0026ndash;with-http_geoip_module configuration parameter. Moreover, this module depends on MaxMind GeoIP library. Unfortuantely, less tutorials talk about this.\nI will try to install it using apt-get\nInstall steps Search for geoip package apt-cache search geoip Install libgeoip-dev sudo apt-get install libgeoip-dev Add configure settings when you build Nginx ./configure \\ --with-http_geoip_module \\ --prefix=/etc/nginx \\ --sbin-path=/usr/sbin/nginx \\ --modules-path=/usr/lib64/nginx/modules \\ --conf-path=/etc/nginx/nginx.conf \\ --error-log-path=/var/log/nginx/error.log \\ --http-log-path=/var/log/nginx/access.log \\ --pid-path=/var/run/nginx.pid \\ --lock-path=/var/run/nginx.lock \\ --http-client-body-temp-path=/var/cache/nginx/client_temp \\ --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\ --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\ --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\ --http-scgi-temp-path=/var/cache/nginx/scgi_temp \\ --user=www-data \\ --group=www-data \\ --with-compat \\ --with-file-aio \\ --with-threads \\ --with-http_addition_module \\ --with-http_auth_request_module \\ --with-http_dav_module \\ --with-http_flv_module \\ --with-http_gunzip_module \\ --with-http_gzip_static_module \\ --with-http_mp4_module \\ --with-http_random_index_module \\ --with-http_realip_module \\ --with-http_secure_link_module \\ --with-http_slice_module \\ --with-http_ssl_module \\ --with-http_stub_status_module \\ --with-http_sub_module \\ --with-http_v2_module \\ --with-mail \\ --with-mail_ssl_module \\ --with-stream \\ --with-stream_realip_module \\ --with-stream_ssl_module \\ --with-stream_ssl_preread_module \\ --with-http_geoip_module \\ --with-cc-opt=\u0026#39;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC\u0026#39; \\ --with-ld-opt=\u0026#39;-Wl,-z,relro -Wl,-z,now -pie\u0026#39; \\ --add-dynamic-module=../nginx-module-vts-0.1.18/ ","permalink":"https://jacklatte.github.io/posts/2020-04-14-ngx_http_geoip_module-installation/","summary":"Ngx-http-geoip-module can enable Internet traffic analysis for indivisual conuntry.","title":"Install ngx_http_geoip_module for ip analysis"},{"content":"Environment Ubuntu 16.04 1. Download Nginx Source Code Nginx source code download\nWe download the stable version.\ncd /opt/local wget https://nginx.org/download/nginx-1.16.1.tar.gz tar xvf nginx-1.16.1.tar.gz sudo chown -R \u0026lt;user\u0026gt;:\u0026lt;group\u0026gt; nginx-1.16.1 2. Download nginx-module-vts Nginx-module-vts release\ncd /opt/local wget https://github.com/vozlt/nginx-module-vts/archive/v0.1.18.tar.gz tar xvf v0.1.18.tar.gz 3. Build Nginx source code Check the dependencies and the settings\n./configure Usually you need to install PCRE, zlib, Openssl to support nginx rewrite , gzip and https.\nsudo apt-get install libpcre3 libpcre3-dev sudo apt-get install zlib1g-dev sudo apt-get install openssl libssl-dev ./configure \\ --prefix=/etc/nginx \\ --sbin-path=/usr/sbin/nginx \\ --modules-path=/usr/lib64/nginx/modules \\ --conf-path=/etc/nginx/nginx.conf \\ --error-log-path=/var/log/nginx/error.log \\ --http-log-path=/var/log/nginx/access.log \\ --pid-path=/var/run/nginx.pid \\ --lock-path=/var/run/nginx.lock \\ --http-client-body-temp-path=/var/cache/nginx/client_temp \\ --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\ --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\ --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\ --http-scgi-temp-path=/var/cache/nginx/scgi_temp \\ --user=www-data \\ --group=www-data \\ --with-compat \\ --with-file-aio \\ --with-threads \\ --with-http_addition_module \\ --with-http_auth_request_module \\ --with-http_dav_module \\ --with-http_flv_module \\ --with-http_gunzip_module \\ --with-http_gzip_static_module \\ --with-http_mp4_module \\ --with-http_random_index_module \\ --with-http_realip_module \\ --with-http_secure_link_module \\ --with-http_slice_module \\ --with-http_ssl_module \\ --with-http_stub_status_module \\ --with-http_sub_module \\ --with-http_v2_module \\ --with-mail \\ --with-mail_ssl_module \\ --with-stream \\ --with-stream_realip_module \\ --with-stream_ssl_module \\ --with-stream_ssl_preread_module \\ --with-http_geoip_module \\ --with-cc-opt=\u0026#39;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC\u0026#39; \\ --with-ld-opt=\u0026#39;-Wl,-z,relro -Wl,-z,now -pie\u0026#39; \\ --add-dynamic-module=../nginx-module-vts-0.1.18/ it will show the configs we are about to use in Makefile\nConfiguration summary + using threads + using system PCRE library + using system OpenSSL library + using system zlib library nginx path prefix: \u0026#34;/etc/nginx\u0026#34; nginx binary file: \u0026#34;/usr/sbin/nginx\u0026#34; nginx modules path: \u0026#34;/usr/lib64/nginx/modules\u0026#34; nginx configuration prefix: \u0026#34;/etc/nginx\u0026#34; nginx configuration file: \u0026#34;/etc/nginx/nginx.conf\u0026#34; nginx pid file: \u0026#34;/var/run/nginx.pid\u0026#34; nginx error log file: \u0026#34;/var/log/nginx/error.log\u0026#34; nginx http access log file: \u0026#34;/var/log/nginx/access.log\u0026#34; nginx http client request body temporary files: \u0026#34;/var/cache/nginx/client_temp\u0026#34; nginx http proxy temporary files: \u0026#34;/var/cache/nginx/proxy_temp\u0026#34; nginx http fastcgi temporary files: \u0026#34;/var/cache/nginx/fastcgi_temp\u0026#34; nginx http uwsgi temporary files: \u0026#34;/var/cache/nginx/uwsgi_temp\u0026#34; nginx http scgi temporary files: \u0026#34;/var/cache/nginx/scgi_temp\u0026#34; 4. Makefile and move compiled module to right place # Compile the nginx source code make # Move compiled files to the location where we configure make install # Move compiled *.so file to place to let /etc/nginx/nginx.conf use this module sudo cp objs/ngx_http_vhost_traffic_status_module.so /etc/nginx/modules/ Reference install-nginx-virtual-host-traffic-status-module\n","permalink":"https://jacklatte.github.io/posts/2020-04-14-nginx-module-vts-installation/","summary":"Nginx-module-vts is designed to monitor Internet traffic on Nginx.","title":"Install nginx-module-vts for monitoring"},{"content":"","permalink":"https://jacklatte.github.io/projects/sad/","summary":"","title":"Stream Analytics Platform"},{"content":"","permalink":"https://jacklatte.github.io/projects/arts-nthu/","summary":"","title":"NTHU Arts Center Website"},{"content":"Now, rust has two ways to write async functions, async-std and tokio. Let\u0026rsquo;s first start with async-std.\nAdd dependencies in Cargo.toml Note that attributes is used for #[async_std::main].\nFilename: Cargo.toml\n[dependencies] async-std = { version = \u0026#34;1.6.5\u0026#34;, features = [\u0026#34;attributes\u0026#34;] } Write functions Filename: src/hello.rs\nasync main requires return a std::io::Result.\n#[async_std::main] async fn main() -\u0026gt; std::io::Result\u0026lt;()\u0026gt; { println!(\u0026#34;hello world!\u0026#34;); Ok(()) } Build your code cargo run ","permalink":"https://jacklatte.github.io/posts/2020-04-12-how-to-use-async-std/","summary":"Now, rust has two ways to write async functions, async-std and tokio. Let\u0026rsquo;s first start with async-std.\nAdd dependencies in Cargo.toml Note that attributes is used for #[async_std::main].\nFilename: Cargo.toml\n[dependencies] async-std = { version = \u0026#34;1.6.5\u0026#34;, features = [\u0026#34;attributes\u0026#34;] } Write functions Filename: src/hello.rs\nasync main requires return a std::io::Result.\n#[async_std::main] async fn main() -\u0026gt; std::io::Result\u0026lt;()\u0026gt; { println!(\u0026#34;hello world!\u0026#34;); Ok(()) } Build your code cargo run ","title":"How to use async-std"},{"content":"Go-Request-limit Github\nHow to test docker run --name redis-lab -p 6379:6379 -d redis cd \u0026lt;project-name\u0026gt; go build main.go //if necessary ./main Design Idea There are the scenerio on how to prevent URL from users\u0026rsquo; request.\nRequest come Check if user\u0026rsquo;s ip is in the Redis list If not, create a redis list, whose key is user\u0026rsquo;s ip. Return. If yes, check the redis list with key=(user\u0026rsquo;s ip) and calcuate its length. If length is over request limit, return status too many reqest. If length is valid, push user\u0026rsquo;s ip to the list and return. Return data including X-RateLimit-Remaining and X-RateLimit-Reset. The value of X-RateLimit-Reset is based on the TTL of certain redis list. The TTL will start when the first request comes and will expire in an hour. After an hour, the redis list of certain key will disappear. ","permalink":"https://jacklatte.github.io/posts/2021-04-12-go-request-limiter/","summary":"A middleware which can restrict ip request in certain time window","title":"Write a request limiter in Go"},{"content":"Push to Github Pages !!!: Remember to stop hot-loading test server before pushing to Github.\nThere are two different types of Github Page.\nUser/Organization Page Project Page For User/Organization Page, we need to create two github repository. One for hugo, the other one is for static files. For Project Page, we need to add publicDir=docs to config.toml.\nHere we demo how to create User/Organization Page.\n1. Create two git repository 412988937/412988937.github.io \u0026ndash;\u0026gt; For static files 412988937/412988937-blog \u0026ndash;\u0026gt; For hugo files 2. Create deploy.sh at hugo-project-dir #!/bin/sh # If a command fails then the deploy stops set -e printf \u0026#34;\\033[0;32mDeploying updates to GitHub...\\033[0m\\n\u0026#34; # Build the project. hugo # if using a theme, replace with `hugo -t \u0026lt;YOURTHEME\u0026gt;` # Go To Public folder cd public # Add changes to git. git add . # Commit changes. msg=\u0026#34;rebuilding site $(date)\u0026#34; if [ -n \u0026#34;$*\u0026#34; ]; then msg=\u0026#34;$*\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # Push source and build repos. git push origin master 2. Add public folder as Git Submodule and root folder In deploy.sh, it run hugo to generate static files to public/. Then it will push whole files to 412988937.github.io.git. Finally we can see our website in https://412988937.github.io\ncd \u0026lt;hugo-project-dir\u0026gt; git init git submodule add -b master https://github.com/412988937/412988937.github.io.git public Note: we can add hugo-project-dir to git respository for tracking.\n3. Publish to Github Page when we create new things sh deploy.sh ","permalink":"https://jacklatte.github.io/posts/2020-04-12-hugo-to-github/","summary":"We push our hugo website to Github Page.","title":"Push hugo to Github Page"},{"content":"1. Install go Go to the Go Officail Webiste and download go.\n2. Install brew (OSX) Brew Official Website\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\u0026#34; 3. Install Hugo brew install hugo 4. Run the command to generate a site hugo new site myblog The directory will like:\nmyblog |- archetypes |- assets |- content |-posts |- data |- layout |- public |- static |- theme 5. Install theme You can download themes from here.\nIn this tutorial we use hugo-theme-noteworthy for example.\ncd \u0026lt;hugo-project-dir\u0026gt; git clone https://github.com/kimcc/hugo-theme-noteworthy.git themes/noteworthy There are two ways to utilize the theme.\nWrite theme=noteworthy to config.toml Copy necessary data to project folder For example:\n// Maybe you need to move more data mv themes/noteworthy/layout layout mv themes/noteworthy/assets asset mv themes/noteworthy/static static 6. Set config.toml Usually we can take a look from themes/exampleSite/config.toml for details.\n7. Run the hot-load testing server hugo server // You can see your website on http://localhost:1313 8. Post articles hugo new posts/hello.md ","permalink":"https://jacklatte.github.io/posts/2020-04-11-hugo-install/","summary":"\u003ccode\u003eHugo\u003c/code\u003e is the fastest static website generator in the world. It is really suitable for software developers to generate their personal website. In this tutorial, we start to build up a website which used \u003ccode\u003eHugo\u003c/code\u003e.","title":"Install Hugo on MacOS"},{"content":"Jack Li B.A. Computer Science / National Tsing Hua University, Taiwan / 2017-2021\n💼 Experiences Software Engineer, LINE, Taiwan, July, 2021 ~ Present Springboot / MySQL / Redis / Kubernetes / Kafka\nDevelop Restful API services with SpringBoot, MySQL and Redis. Design unit tests and build automated CI/CD pipeline with JUnit and Jenkins. Build scalable and fault-tolerance system with Docker, Kubernetes and Kafka. ☎️ Contact Email: jack.yenchun.li@gmail.com Github: https://github.com/jacklatte Linkedin: https://www.linkedin.com/in/jack-yen-chun-li/ 🛠️ Skills Go Java C/C++ Kubernetes SQL/NoSQL CUDA Distributed System 🇨🇦 Languages English / Chinese\n","permalink":"https://jacklatte.github.io/about/","summary":"Jack Li B.A. Computer Science / National Tsing Hua University, Taiwan / 2017-2021\n💼 Experiences Software Engineer, LINE, Taiwan, July, 2021 ~ Present Springboot / MySQL / Redis / Kubernetes / Kafka\nDevelop Restful API services with SpringBoot, MySQL and Redis. Design unit tests and build automated CI/CD pipeline with JUnit and Jenkins. Build scalable and fault-tolerance system with Docker, Kubernetes and Kafka. ☎️ Contact Email: jack.yenchun.li@gmail.com Github: https://github.com/jacklatte Linkedin: https://www.","title":"About"},{"content":" What is Hugo ? 1-1. Hugo install 1-2. Hugo to github ","permalink":"https://jacklatte.github.io/hugo-tutorial/","summary":"archives","title":"Hugo Tutorial"},{"content":"Hugo Tutorial Build your personal website\nQEMU Tutorial Software-simulated virtual machine\n","permalink":"https://jacklatte.github.io/topic/","summary":"Hugo Tutorial Build your personal website\nQEMU Tutorial Software-simulated virtual machine","title":"Topic"}]