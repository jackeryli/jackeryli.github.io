[{"content":"Lab Trap RISC-V assembly (easy) Backtrace (moderate) Alarm (hard) RISC-V assembly (easy) Which registers contain arguments to functions? For example, which register holds 13 in main\u0026rsquo;s call to¬†printf?\nAns: a1, a2 will store arguments. Here li a2,13 means that load immediate 13 to a2.\nvoid main(void) { 1c:\t1141 add\tsp,sp,-16 1e:\te406 sd\tra,8(sp) 20:\te022 sd\ts0,0(sp) 22:\t0800 add\ts0,sp,16 printf(\u0026#34;%d %d\\n\u0026#34;, f(8)+1, 13); 24:\t4635 li\ta2,13 26:\t45b1 li\ta1,12 //...\t} Where is the call to function¬†f¬†in the assembly code for main? Where is the call to¬†g? (Hint: the compiler may inline functions.)\nf() stored at 000000000000000e and g() stored at 0000000000000000.\n0000000000000000 \u0026lt;g\u0026gt;: // ... int g(int x) { // ... } // ... 000000000000000e \u0026lt;f\u0026gt;: int f(int x) { // ... } At what address is the function¬†printf¬†located?\n0000000000000616 \u0026lt;printf\u0026gt;: We can also get the same result by looking at how compiler calculates address\nauipc: add upper immediate to program counter and save to register\njalr: jump to certain address based on register and offset\n30:\t00000097 auipc\tra,0x0 34:\t5e6080e7 jalr\t1510(ra) # 616 \u0026lt;printf\u0026gt; So the following steps are:\nprogram counter = 30 add 0 to program counter and save to ra jump to ra + 1510: hex(1510) + 0x30 = 0x5e6 + 0x30 = 0x616 What value is in the register¬†ra¬†just after the¬†jalr¬†to¬†printf¬†in¬†main?\nRead risc-v-spec at page 16:\nüí° The indirect jump instruction JALR (jump and link register) uses the I-type encoding. The target address is obtained by adding the 12-bit signed I-immediate to the register rs1, then setting the least-significant bit of the result to zero. The address of the instruction following the jump (pc+4) is written to register rd. Register x0 can be used as the destination if the result is not required. When used with a base rs1=x0, JALR can be used to implement a single instruction subroutine call to the lowest 2 KiB or highest 2 KiB address region from anywhere in the address space, which could be used to implement fast calls to a small runtime library.\nRegister ra is used for return address. Therefore, jalr 1510(ra) ra store pc+4, 34 + 4 = 38.\nBacktrace (moderate) void backtrace(void) { uint64 fp = r_fp(); while(fp \u0026lt; PGROUNDUP(fp)) { uint64 ra = *(uint64*)(fp - 8); // return address at offset(-8) printf(\u0026#34;%p\\n\u0026#34;, ra); fp = *(uint64*)(fp - 16); // previous frame pointer at offset(-16) } } Alarm (hard) TBD\n","permalink":"https://jacklatte.github.io/posts/2023-10-11-xv6-lab-trap/","summary":"Implement MIT xv6 lab:trap","title":"xv6 lab trap"},{"content":"This is the implementation of String in JDK 11:\npublic final class String implements java.io.Serializable, Comparable\u0026lt;String\u0026gt;, CharSequence { /** The value is used for character storage */ private final byte[] value; /** Encoder to encode value, LATIN1 or UTF16 */ private final byte coder; /** Cache the hash code for the string */ private int hash; [...] } We can see that String class is decorated by final, so it cannot be inherited by other classes. We can also see that value is decorated by final and it means that value is immuntable. If we don\u0026rsquo;t make String immutable, it might cause security issues. For example, if String doesn\u0026rsquo;t remain immutable and we try to send confidential messages to others, hackers can change the message to what they want.\nThere is a String pool in the JVM. String pool caches all String object in it. There are two ways to create a String object:\nString s = \u0026ldquo;abc\u0026rdquo; String s = new String(\u0026ldquo;abc\u0026rdquo;) If we execute the following code, we will find that s1 == s2, s2 != s3, s3 != s4. The reason is that s2 does not create new instance. Instead, it will first look for \u0026ldquo;abc\u0026rdquo; in String pool. If success, it return the reference. Besides, there is a slightly different when we use new String. In this case, JVM will create a new String object in heap memory and make it reference to \u0026ldquo;abc\u0026rdquo; in the String pool.\nString s1 = \u0026#34;abc\u0026#34;; String s2 = \u0026#34;abc\u0026#34;; String s3 = new String(\u0026#34;abc\u0026#34;); String s4 = new String(\u0026#34;abc\u0026#34;); And if we try to modify String, it works. That because s1 here is only a reference. The String object still resides in String pool and it is still not changed.\nString s1 = \u0026#34;def\u0026#34;; s1 = \u0026#34;ghi\u0026#34;; /** it works */ How to optimize concating string Use StringBuilder or StringBuffer to concat multiple strings. If your application is not thread-safe, use StringBuffer. Otherwise, StringBuilder is faster.\nThis is the implementaion of StringBuffer:\npublic final class StringBuffer extends AbstractStringBuilder implements java.io.Serializable, Comparable\u0026lt;StringBuffer\u0026gt;, CharSequence { private transient String toStringCache; @Override public synchronized int compareTo(StringBuffer another) { return super.compareTo(another); } @Override public synchronized int length() { return count; } [...] } We can see the introduction of synchronized in Oracle websites:\n// https://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html First, it is not possible for two invocations of synchronized methods on the same object to interleave. When one thread is executing a synchronized method for an object, all other threads that invoke synchronized methods for the same object block (suspend execution) until the first thread is done with the object. Second, when a synchronized method exits, it automatically establishes a happens-before relationship with any subsequent invocation of a synchronized method for the same object. This guarantees that changes to the state of the object are visible to all threads. Note that constructors cannot be synchronized ‚Äî using the synchronized keyword with a constructor is a syntax error. Synchronizing constructors doesn\u0026#39;t make sense, because only the thread that creates an object should have access to it while it is being constructed. String.intern() intern() will first look for same object in heap memory. If yes, then return reference. It help us decrease the memory usage but sometimes hurt the performance.\nhttps://blog.codecentric.de/en/2012/03/save-memory-by-using-string-intern-in-java/\nThink carefully while using Split We can use String.indexOf to split the long string and get better performance.\nString s = \u0026#34;abc de f ghij klmno p qrs\u0026#34;; List\u0026lt;String\u0026gt; ans1 = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;String\u0026gt; ans2 = new ArrayList\u0026lt;\u0026gt;(Arrays.asList(s.split(\u0026#34; \u0026#34;))); int pos = 0, end; while((end = s.indexOf(\u0026#39; \u0026#39;, pos)) \u0026gt;= 0) { ans1.add(s.substring(pos, end)); pos = end + 1; } ans1.forEach(System.out::println); ans2.forEach(System.out::println); https://www.baeldung.com/java-string-performance\n","permalink":"https://jacklatte.github.io/posts/2022-04-19-java-string-implementation/","summary":"This is the implementation of String in JDK 11:\npublic final class String implements java.io.Serializable, Comparable\u0026lt;String\u0026gt;, CharSequence { /** The value is used for character storage */ private final byte[] value; /** Encoder to encode value, LATIN1 or UTF16 */ private final byte coder; /** Cache the hash code for the string */ private int hash; [...] } We can see that String class is decorated by final, so it cannot be inherited by other classes.","title":"Java String Implementation"},{"content":"What is docker? Docker uses namespace and cgroup to isolate processes.\nRun nginx with docker docker run -d -p 8080:80 ubuntu/nginx What\u0026rsquo;s the difference of a process running in docker than bare metal ? If we run ps -ef on host computer, it shows that\nUID PID COMMAND root 1 /sbin/init systemd 29 nginx But if we run ps -ef inside container, it shows that\nUID PID COMMAND root 1 nginx Namespace Introduction The main difference is that PID is different. What makes this differences is that docker uses namespace to create an isolated environment. We can only see the process in the same namespace.\nLinux can do different types of isolation. We can enter man namespaces to see more details:\n$ man namespaces Namespace types The following table shows the namespace types available on Linux. The second column of the table shows the flag value that is used to specify the namespace type in var‚Äê ious APIs. The third column identifies the manual page that provides details on the namespace type. The last column is a summary of the resources that are isolated by the namespace type. Namespace Flag Page Isolates Cgroup CLONE_NEWCGROUP cgroup_namespaces(7) Cgroup root directory IPC CLONE_NEWIPC ipc_namespaces(7) System V IPC, POSIX message queues Network CLONE_NEWNET network_namespaces(7) Network devices, stacks, ports, etc. Mount CLONE_NEWNS mount_namespaces(7) Mount points PID CLONE_NEWPID pid_namespaces(7) Process IDs User CLONE_NEWUSER user_namespaces(7) User and group IDs UTS CLONE_NEWUTS uts_namespaces(7) Hostname and NIS domain name Cgroup Introduction cgroup stands for control group.\n","permalink":"https://jacklatte.github.io/posts/2022-04-09-docker-introduction/","summary":"What is docker? Docker uses namespace and cgroup to isolate processes.\nRun nginx with docker docker run -d -p 8080:80 ubuntu/nginx What\u0026rsquo;s the difference of a process running in docker than bare metal ? If we run ps -ef on host computer, it shows that\nUID PID COMMAND root 1 /sbin/init systemd 29 nginx But if we run ps -ef inside container, it shows that\nUID PID COMMAND root 1 nginx Namespace Introduction The main difference is that PID is different.","title":"Docker Introduction"},{"content":"Background Most of the services need a image upload services. Some applications like Ptt, Dcard and HackMD use Imgur to store pictures. Imgur provides free spaces for users to upload their images, and it also provides API so that programers can upload images by sending POST request. In this tutorial, we are going to build a imgur upload service.\nPackages Used gonic/gin: http server bytes: store images encoding/json: process response io: transfer io.Reader to []byte \u0026ldquo;mime/multipart\u0026rdquo;: form data(request) Code 1. Create a Client struct and constructor to store/initialize token and imgur API URL type Client struct { token string uploadApiUrl string } func NewClient(token string, uploadApiUrl string) *Client{ return \u0026amp;Client{token: token, uploadApiUrl: uploadApiUrl} } 2. Create a UploadImage function We consider to choose type []byte instead of io.Reader for params. The main reason is that we should pass the real data, not the FileReader pointer. Also []byte is easier to write test.\nWorkflows if image is nil, return error Create a multipart writer for writing form-data CreateFormFile creates fields for form Copy data at the end of the writer Send a POST request to Imugr with the authorization token Decode the response Return the imgur image url Functions Package Function mime/multipart func (w *Writer) CreateFormFile(fieldname, filename string) (io.Writer, error) io func Copy(dst Writer, src Reader) (written int64, err error) http func NewRequest(method, url string, body io.Reader) (*Request, error) io/ioutil func ReadAll(r io.Reader) ([]byte, error) Code func (client *Client) UploadImage(image []byte) (string, error){ if image == nil { return \u0026#34;\u0026#34;, errors.New(\u0026#34;No Image\u0026#34;) } var buf = new(bytes.Buffer) writer := multipart.NewWriter(buf) part, _ := writer.CreateFormFile(\u0026#34;image\u0026#34;, \u0026#34;filename\u0026#34;) imgReader := bytes.NewReader(image) io.Copy(part, imgReader) writer.Close() req, _ := http.NewRequest(\u0026#34;POST\u0026#34;, client.uploadApiUrl, buf) req.Header.Set(\u0026#34;Content-Type\u0026#34;, writer.FormDataContentType()) req.Header.Set(\u0026#34;Authorization\u0026#34;, \u0026#34;Bearer \u0026#34;+client.token) res, _ := http.DefaultClient.Do(req) defer res.Body.Close() body, _ := ioutil.ReadAll(res.Body) dec := json.NewDecoder(bytes.NewReader(body)) var img imageInfoDataWrapper if err := dec.Decode(\u0026amp;img); err != nil { return \u0026#34;\u0026#34;, errors.New(\u0026#34;Fail to decode\u0026#34;) } if !img.Success { return \u0026#34;\u0026#34;, errors.New(\u0026#34;Fail\u0026#34;) } return img.Data.Link, nil } Tests We set token by environment variable.\nThere are two tests:\nTest upload nil image Test upload real image io.ReadFile() reads file in []byte as input file.\nNeed to check if the return URL is correct (https://i.imgur.com/xxxxx).\npackage upload import ( \u0026#34;testing\u0026#34; \u0026#34;os\u0026#34; \u0026#34;io/ioutil\u0026#34; \u0026#34;regexp\u0026#34; ) // Test if upload a nil image, it should return error func TestUploadNilImage(t *testing.T) { client := NewClient(\u0026#34;\u0026#34;, \u0026#34;\u0026#34;) _, err := client.UploadImage(nil) if err == nil { t.Error(\u0026#34;UploadImage() should have an error\u0026#34;) t.Fail() } } // Test if upload real image, it should return success(200) func TestUploadRealImage(t *testing.T) { token := os.Getenv(\u0026#34;IMGUR_UPLOAD_TOKEN\u0026#34;) if token == \u0026#34;\u0026#34; { t.Skip(\u0026#34;IMGUR_UPLOAD_TOKEN is not set.\u0026#34;) } client := NewClient(os.Getenv(\u0026#34;IMGUR_UPLOAD_TOKEN\u0026#34;), \u0026#34;https://api.imgur.com/3/upload\u0026#34;) // Read File to byte file, err := ioutil.ReadFile(\u0026#34;logo.png\u0026#34;) if err != nil { t.Skip(\u0026#34;Can\u0026#39;t read logo.png for test\u0026#34;) } url, err := client.UploadImage(file) if err != nil { t.Errorf(\u0026#34;UploadImage() failed with error: %v\u0026#34;, err) t.Fail() } if matched, _ := regexp.MatchString(`https://i.imgur.com/`, url); !matched { t.Error(\u0026#34;UploadImage() did not return imgur url\u0026#34;) t.Fail() } } Usage we need to pass []byte to UploadImage().\nc.FormData()returns *multipart.FileHeader.\n*multipart.FileHeader.Open() returns io.Reader\nWe use ioutil.ReadAll() to read io.Reader to []byte\n// imgurUploadServer.go package main import ( \u0026#34;github.com/gin-gonic/gin\u0026#34; \u0026#34;github.com/jacklatte/arts-nthu-backend/pkg/upload\u0026#34; \u0026#34;io/ioutil\u0026#34; \u0026#34;os\u0026#34; \u0026#34;mime/multipart\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { r := gin.Default() r.POST(\u0026#34;/api/v1/upload\u0026#34;, func(c *gin.Context) { type request struct { image *multipart.FileHeader `form:image binding:\u0026#34;required\u0026#34;` } var req request if err := c.ShouldBind(\u0026amp;req); err != nil { c.JSON(http.StatusBadRequest, gin.H{ \u0026#34;message\u0026#34;: \u0026#34;miss data\u0026#34;, }) return } file, err := c.FormFile(\u0026#34;image\u0026#34;) // *Multipart.FileHeader if file.Size \u0026lt;=0 { c.JSON(500, gin.H{ \u0026#34;message\u0026#34;: err.Error(), }) } if err != nil { c.JSON(500, gin.H{ \u0026#34;message\u0026#34;: err.Error(), }) } reader, err := file.Open()\t// io.Reader if err != nil { c.JSON(500, gin.H{ \u0026#34;message\u0026#34;: err.Error(), }) } buf, err := ioutil.ReadAll(reader)\t// bytes[] if err != nil { c.JSON(500, gin.H{ \u0026#34;message\u0026#34;: err.Error(), }) } client := upload.NewClient(os.Getenv(\u0026#34;IMGUR_UPLOAD_TOKEN\u0026#34;), \u0026#34;https://api.imgur.com/3/upload\u0026#34;) imgurUrl, _ := client.UploadImage(buf) c.JSON(200, gin.H{ \u0026#34;url\u0026#34;: imgurUrl, }) return }) r.Run() } ","permalink":"https://jacklatte.github.io/posts/2021-04-10-go-imgur/","summary":"Background Most of the services need a image upload services. Some applications like Ptt, Dcard and HackMD use Imgur to store pictures. Imgur provides free spaces for users to upload their images, and it also provides API so that programers can upload images by sending POST request. In this tutorial, we are going to build a imgur upload service.\nPackages Used gonic/gin: http server bytes: store images encoding/json: process response io: transfer io.","title":"Write a imgur upload service with go"},{"content":"","permalink":"https://jacklatte.github.io/projects/sad/","summary":"","title":"Stream Analytics Platform"},{"content":"","permalink":"https://jacklatte.github.io/projects/arts-nthu/","summary":"","title":"NTHU Arts Center Website"},{"content":"Go-Request-limit Github\nHow to test docker run --name redis-lab -p 6379:6379 -d redis cd \u0026lt;project-name\u0026gt; go build main.go //if necessary ./main Design Idea There are the scenerio on how to prevent URL from users\u0026rsquo; request.\nRequest come Check if user\u0026rsquo;s ip is in the Redis list If not, create a redis list, whose key is user\u0026rsquo;s ip. Return. If yes, check the redis list with key=(user\u0026rsquo;s ip) and calcuate its length. If length is over request limit, return status too many reqest. If length is valid, push user\u0026rsquo;s ip to the list and return. Return data including X-RateLimit-Remaining and X-RateLimit-Reset. The value of X-RateLimit-Reset is based on the TTL of certain redis list. The TTL will start when the first request comes and will expire in an hour. After an hour, the redis list of certain key will disappear. ","permalink":"https://jacklatte.github.io/posts/2021-04-12-go-request-limiter/","summary":"A middleware which can restrict ip request in certain time window","title":"Write a request limiter in Go"},{"content":"Jack Li Master of Electrical Engineering / University of British Columbia, Canada / 2023-Present\nBachelor of Computer Science / National Tsing Hua University, Taiwan / 2017-2021\nüíº Experiences Software Engineer, LINE, Taiwan, July, 2021.07 ~ 2023.07 Springboot / MySQL / Redis / Kubernetes / Kafka\nDeveloped the mission API, enabling users to engage in various missions such as check-ins, following users, and completing transactions, leading to a new business for increasing 200M revenue. Analyzed transaction data with Flink and helped deploy Flink on the kubernetes cluster with Oauth2 support. Developed a File Download Center for the marketing team, integrating Kafka, Elasticsearch and Amazon S3. Designed and implemented a favorite API for user preferences and recommended posts. Developed advertisements and events APIs in microservices architectures for serving 100M users globally. Established a CI workflow with automated unit tests and integration tests with Jenkins and CircleCI. Managed kubernetes cluster with auto-scaling features and monitor with prometheus and grafana. Developed a Vue.js dashboard for user management and data visualization. ‚òéÔ∏è Contact Email: jack.yenchun.li@gmail.com Github: https://github.com/jacklatte Linkedin: https://www.linkedin.com/in/jack-yen-chun-li/ üõ†Ô∏è Skills Java C/C++ Go Docker Kubernetes SQL/NoSQL CUDA Distributed System üá®üá¶ Languages English / Chinese\n","permalink":"https://jacklatte.github.io/about/","summary":"Jack Li Master of Electrical Engineering / University of British Columbia, Canada / 2023-Present\nBachelor of Computer Science / National Tsing Hua University, Taiwan / 2017-2021\nüíº Experiences Software Engineer, LINE, Taiwan, July, 2021.07 ~ 2023.07 Springboot / MySQL / Redis / Kubernetes / Kafka\nDeveloped the mission API, enabling users to engage in various missions such as check-ins, following users, and completing transactions, leading to a new business for increasing 200M revenue.","title":"About"},{"content":" What is Hugo ? 1-1. Hugo install 1-2. Hugo to github ","permalink":"https://jacklatte.github.io/hugo-tutorial/","summary":"archives","title":"Hugo Tutorial"},{"content":"Hugo Tutorial Build your personal website\nQEMU Tutorial Software-simulated virtual machine\n","permalink":"https://jacklatte.github.io/topic/","summary":"Hugo Tutorial Build your personal website\nQEMU Tutorial Software-simulated virtual machine","title":"Topic"}]