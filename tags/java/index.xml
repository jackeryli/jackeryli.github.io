<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>java on Jacklatte☕</title>
    <link>https://jacklatte.github.io/tags/java/</link>
    <description>Recent content in java on Jacklatte☕</description>
    <image>
      <url>https://jacklatte.github.io/avatar.jpg</url>
      <link>https://jacklatte.github.io/avatar.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 01 Jun 2022 12:16:46 +0800</lastBuildDate><atom:link href="https://jacklatte.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java multi-thread programming with executor service</title>
      <link>https://jacklatte.github.io/posts/2022-06-01-java-executor-service/</link>
      <pubDate>Wed, 01 Jun 2022 12:16:46 +0800</pubDate>
      
      <guid>https://jacklatte.github.io/posts/2022-06-01-java-executor-service/</guid>
      <description>Executor Service We create a Callable Object to construct a custom runnable task.
package com.jack; import java.util.Random; import java.util.concurrent.Callable; public class BankBatchTask implements Callable&amp;lt;String&amp;gt; { private static final String OK = &amp;#34;0000&amp;#34;; private static final String TIME_EXPIRED = &amp;#34;4000&amp;#34;; private static final String INTERNAL_SERVER_ERROR = &amp;#34;9000&amp;#34;; Random random = new Random(); @Override public String call() throws Exception { try { int sleepTime = random.nextInt(10000); Thread.sleep(sleepTime); if(sleepTime &amp;gt; 500) return TIME_EXPIRED; return OK; } catch(Exception e) { e.</description>
    </item>
    
    <item>
      <title>Java String Implementation</title>
      <link>https://jacklatte.github.io/posts/2022-04-19-java-string-implementation/</link>
      <pubDate>Tue, 19 Apr 2022 12:16:46 +0800</pubDate>
      
      <guid>https://jacklatte.github.io/posts/2022-04-19-java-string-implementation/</guid>
      <description>This is the implementation of String in JDK 11:
public final class String implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence { /** The value is used for character storage */ private final byte[] value; /** Encoder to encode value, LATIN1 or UTF16 */ private final byte coder; /** Cache the hash code for the string */ private int hash; [...] } We can see that String class is decorated by final, so it cannot be inherited by other classes.</description>
    </item>
    
  </channel>
</rss>
