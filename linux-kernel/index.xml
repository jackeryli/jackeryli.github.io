<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://jackeryli.github.io/linux-kernel/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://jackeryli.github.io/linux-kernel/index.xml" rel="self" type="application/rss+xml"/><item><title>Add system call to linux</title><link>https://jackeryli.github.io/linux-kernel/add_system_call/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jackeryli.github.io/linux-kernel/add_system_call/</guid><description>Open include/uapi/asm-generic/unistd.h
#define __NR_get_cpuid 452 __SYSCALL(__NR_get_cpuid, sys_get_cpuid) #undef __NR_syscalls #define __NR_syscalls 453 Open linux/kernel/sys.c
SYSCALL_DEFINE0(get_cpuid) { return raw_smp_processor_id(); }</description></item><item><title>Write your first kernel module</title><link>https://jackeryli.github.io/linux-kernel/write_first_kernel_module/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jackeryli.github.io/linux-kernel/write_first_kernel_module/</guid><description>Building Kernel Module # Create rootkit.c
#include &amp;lt;linux/module.h&amp;gt; #include &amp;lt;linux/syscalls.h&amp;gt; #include &amp;lt;linux/types.h&amp;gt; #define OURMODNAME &amp;#34;rootkit&amp;#34; MODULE_AUTHOR(&amp;#34;FOOBAR&amp;#34;); MODULE_DESCRIPTION(&amp;#34;FOOBAR&amp;#34;); MODULE_LICENSE(&amp;#34;Dual MIT/GPL&amp;#34;); MODULE_VERSION(&amp;#34;0.1&amp;#34;); static int __init rootkit_init(void) { printk(KERN_INFO &amp;#34;hello, world!\n&amp;#34;); return 0; } static void __exit rootkit_exit(void) { printk(KERN_INFO &amp;#34;Goodbye, world!\n&amp;#34;); } module_init(rootkit_init); module_exit(rootkit_exit); Create Makefile. Remember to update KDIR with your linux source code dir.
obj-m = rootkit.o PWD := $(shell pwd) EXTRA_CFLAGS = -Wall -g CROSS = aarch64-linux-gnu- KDIR = /home/jack/Desktop/linux/ all: $(MAKE) ARCH=arm64 CROSS_COMPILE=$(CROSS) -C $(KDIR) M=$(PWD) modules clean: $(MAKE) -C $(KDIR) M=$(PWD) clean Compile kernel module</description></item></channel></rss>